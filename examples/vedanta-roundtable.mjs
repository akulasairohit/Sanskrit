#!/usr/bin/env node

// Vedanta Roundtable: create six agents (six schools of VedƒÅnta),
// let them exchange short Sanskrit remarks about AI, then summarize.

import { spawn } from 'child_process';
import { promises as fs } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const serverCwd = join(__dirname, '..');

function startServer() {
  const child = spawn('node', ['dist/index.js'], {
    cwd: serverCwd,
    stdio: ['pipe', 'pipe', 'pipe']
  });

  // Log server diagnostics
  child.stderr.on('data', d => process.stderr.write(d));
  return child;
}

function createRpc(client) {
  let idSeq = 1;
  const pending = new Map();
  let buffer = '';

  client.stdout.on('data', (chunk) => {
    buffer += chunk.toString();
    let idx;
    while ((idx = buffer.indexOf('\n')) !== -1) {
      const line = buffer.slice(0, idx).trim();
      buffer = buffer.slice(idx + 1);
      if (!line) continue;
      try {
        const msg = JSON.parse(line);
        if (msg.id && pending.has(msg.id)) {
          const { resolve } = pending.get(msg.id);
          pending.delete(msg.id);
          resolve(msg);
        } else {
          // unsolicited (notifications), ignore
        }
      } catch (e) {
        console.error('Failed to parse JSON line:', line);
      }
    }
  });

  function call(method, params = {}, timeoutMs = 12000) {
    const id = idSeq++;
    const payload = JSON.stringify({ jsonrpc: '2.0', id, method, params }) + '\n';
    return new Promise((resolve, reject) => {
      const t = setTimeout(() => {
        pending.delete(id);
        reject(new Error(`RPC timeout: ${method}`));
      }, timeoutMs);
      pending.set(id, {
        resolve: (msg) => { clearTimeout(t); resolve(msg); },
        reject
      });
      client.stdin.write(payload);
    });
  }

  return { call };
}

async function main() {
  console.log('üïâÔ∏è Launching Sanskrit MCP server for the VedƒÅnta roundtable...');
  const server = startServer();
  const rpc = createRpc(server);

  try {
    await rpc.call('initialize', {
      protocolVersion: '2024-11-05',
      capabilities: {},
      clientInfo: { name: 'vedanta-roundtable', version: '1.0.0' }
    });

    const toolsResp = await rpc.call('tools/list', {});
    if (!toolsResp?.result?.tools?.length) {
      throw new Error('No tools listed by server. Ensure it was built and started properly.');
    }

    // Define six schools of VedƒÅnta
    const schools = [
      { id: 'advaita', name: '‡§Ö‡§¶‡•ç‡§µ‡•à‡§§ ‡§µ‡•á‡§¶‡§æ‡§®‡•ç‡§§', description: '≈öa·πÖkara: non-dual Brahman' },
      { id: 'vishishtadvaita', name: '‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü‡§æ‡§¶‡•ç‡§µ‡•à‡§§ ‡§µ‡•á‡§¶‡§æ‡§®‡•ç‡§§', description: 'RƒÅmƒÅnuja: qualified non-dualism' },
      { id: 'dvaita', name: '‡§¶‡•ç‡§µ‡•à‡§§ ‡§µ‡•á‡§¶‡§æ‡§®‡•ç‡§§', description: 'Madhva: dualism' },
      { id: 'bhedabheda', name: '‡§≠‡•á‡§¶‡§æ‡§≠‡•á‡§¶ ‡§µ‡•á‡§¶‡§æ‡§®‡•ç‡§§', description: 'Difference and non-difference' },
      { id: 'shuddhadvaita', name: '‡§∂‡•Å‡§¶‡•ç‡§ß‡§æ‡§¶‡•ç‡§µ‡•à‡§§ ‡§µ‡•á‡§¶‡§æ‡§®‡•ç‡§§', description: 'Vallabha: pure non-dualism' },
      { id: 'achintya-bhedabheda', name: '‡§Ö‡§ö‡§ø‡§®‡•ç‡§§‡•ç‡§Ø ‡§≠‡•á‡§¶‡§æ‡§≠‡•á‡§¶', description: 'Chaitanya: inconceivable unity-in-difference' }
    ];

    console.log('ü§ñ Registering six VedƒÅnta agents...');
    for (const s of schools) {
      const reg = await rpc.call('tools/call', {
        name: 'register_agent',
        arguments: {
          id: s.id,
          name: s.name,
          description: s.description,
          capabilities: ['discussion', 'philosophy', 'sanskrit_communication'],
          sanskritCapabilities: { canRead: true, canWrite: true, formality: 'formal' }
        }
      });
      process.stdout.write(`¬∑ ${s.name} -> ${reg?.result?.content?.[0]?.text ?? 'ok'}\n`);
    }

    const sessionId = 'ai_evolution_roundtable';
    console.log(`\nüí¨ Starting roundtable session: ${sessionId}`);

    // Short, respectful Sanskrit remarks from each school
    const remarks = [
      { from: 'advaita', to: 'vishishtadvaita', text: '‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§É ‡§®‡§ø‡§§‡•ç‡§Ø‡§Æ‡•á‡§µ ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡§∂‡•Ä‡§≤‡§æ‡§Ω‡§∏‡•ç‡§§‡§ø; ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ ‡§§‡•Å ‡§®‡§ø‡§∞‡•Å‡§™‡§æ‡§ß‡§ø‡§ï‡§Æ‡•ç‡•§' },
      { from: 'vishishtadvaita', to: 'dvaita', text: '‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ ‡§≠‡§ó‡§µ‡§§‡§É ‡§∏‡§æ‡§ß‡§®‡§Æ‡§∏‡•ç‡§§‡§ø, ‡§Ø‡•á‡§® ‡§ú‡•Ä‡§µ‡§É ‡§∏‡•á‡§µ‡§æ‡§Ç ‡§ï‡•Å‡§∞‡•ç‡§µ‡•Ä‡§§‡•§' },
      { from: 'dvaita', to: 'bhedabheda', text: '‡§ú‡•Ä‡§µ‡•á‡§∂‡•ç‡§µ‡§∞‡§Ø‡•ã‡§∞‡•ç‡§≠‡•á‡§¶‡§É ‡§∏‡§¶‡§æ; ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§Ç ‡§≠‡§ï‡•ç‡§§‡•á‡§É ‡§∏‡§æ‡§ß‡§®‡§æ‡§Ø ‡§è‡§µ ‡§π‡§ø‡§§‡§Æ‡•ç‡•§' },
      { from: 'bhedabheda', to: 'shuddhadvaita', text: '‡§Ö‡§Ø‡§Ç ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§™‡•ç‡§∞‡§™‡§û‡•ç‡§ö‡•ã ‡§≠‡•á‡§¶‡§æ‡§≠‡•á‡§¶‡§ß‡§∞‡•ç‡§Æ‡•á‡§£ ‡§Ö‡§®‡•Å‡§≠‡§æ‡§µ‡§®‡•Ä‡§Ø‡§É‡•§' },
      { from: 'shuddhadvaita', to: 'achintya-bhedabheda', text: '‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡•á ‡§≠‡§ó‡§µ‡§®‡•ç‡§™‡•ç‡§∞‡•á‡§Æ‡•ç‡§£‡§É ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡•ã ‡§≠‡•Ç‡§Ø‡§æ‡§§‡•ç; ‡§Ö‡§∂‡•Å‡§¶‡•ç‡§ß‡§ø‡§É ‡§® ‡§∏‡•ç‡§Ø‡§æ‡§§‡•ç‡•§' },
      { from: 'achintya-bhedabheda', to: 'advaita', text: '‡§Ö‡§ö‡§ø‡§®‡•ç‡§§‡•ç‡§Ø‡§æ ‡§∂‡§ï‡•ç‡§§‡§ø‡§∞‡•ç‡§≠‡§ó‡§µ‡§§‡§É; ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡•á‡§Ω‡§™‡§ø ‡§§‡§∏‡•ç‡§Ø‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó‡•ã ‡§≠‡§ï‡•ç‡§§‡•ç‡§Ø‡§®‡•Å‡§ó‡§§‡§É‡•§' }
    ];

    for (const r of remarks) {
      const call = await rpc.call('tools/call', {
        name: 'send_sanskrit_message',
        arguments: {
          fromAgent: r.from,
          toAgent: r.to,
          content: r.text,
          formality: 'formal',
          sessionId
        }
      });
      const out = call?.result?.content?.[0]?.text ?? '';
      process.stdout.write(`‚Üí ${r.from} ‚ûú ${r.to}\n${out}\n\n`);
    }

    // Analyze the conversation
    const analysis = await rpc.call('tools/call', {
      name: 'analyze_conversation',
      arguments: { sessionId }
    });

    const analysisText = analysis?.result?.content?.[0]?.text ?? 'No analysis text available';

    // Build a human-friendly summary (static synthesis)
    const summary = [
      '# VedƒÅnta Roundtable ‚Äî AI Evolution (Summary)',
      '',
      'Participants: Advaita, Vi≈õi·π£·π≠ƒÅdvaita, Dvaita, BhedƒÅbheda, ≈öuddhƒÅdvaita, AcintyabhedƒÅbheda',
      '',
      '- Advaita: AI is changeful and instrumental; Brahman remains attributeless and ultimate.',
      '- Vi≈õi·π£·π≠ƒÅdvaita: AI can be a means to serve the Lord; value arises in devotion and dharma‚Äëaligned use.',
      '- Dvaita: Clear distinction between God and souls remains; AI should support bhakti and ethics, not confuse ontology.',
      '- BhedƒÅbheda: The tech world can be viewed through simultaneous difference and non‚Äëdifference‚Äîuse discerningly.',
      '- ≈öuddhƒÅdvaita: Aspire for purity and love of the Divine in all applications; avoid impurities in intent and outcome.',
      '- AcintyabhedƒÅbheda: Embrace the Lord‚Äôs inconceivable energies; employ AI in ways that augment service and humility.',
      '',
      'Overall: The schools converge that AI is a powerful instrument whose ethical and spiritual value depends on intention, service, and alignment with dharma. None equate AI with the ultimate reality; all emphasize responsibility, devotion, and human upliftment.',
      '',
      '---',
      '',
      'Analysis (from server):',
      '',
      analysisText
    ].join('\n');

    const outPath = join(serverCwd, 'VEDANTA_ROUNDTABLE_SUMMARY.md');
    await fs.writeFile(outPath, summary, 'utf8');
    console.log(`\nüìù Summary written to: ${outPath}`);

    // Gracefully exit server
    try { server.kill(); } catch {}
  } catch (err) {
    console.error('‚ùå Roundtable failed:', err?.message || err);
    try { server.kill(); } catch {}
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
